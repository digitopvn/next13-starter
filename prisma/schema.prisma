// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(auto()) @map("_id") @db.ObjectId
    userId                   String  @db.ObjectId
    type                     String
    provider                 String
    providerAccountId        String  @map("provider_account_id")
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    refresh_token_expires_in Int?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String     @id @default(auto()) @map("_id") @db.ObjectId
    providerAccountId String     @unique
    name              String?
    email             String?
    emailOriginal     String?
    emailVerified     DateTime?
    image             String?
    sessions          Session[]
    Account           Account[]
    userRoles         UserRole[]
}

model Role {
    id              String           @id @default(auto()) @map("_id") @db.ObjectId
    name            String           @unique
    roleUsers       UserRole[]
    rolePermissions RolePermission[]
}

model Permission {
    id              String           @id @default(auto()) @map("_id") @db.ObjectId
    name            String           @unique
    rolePermissions RolePermission[]
}

// Intermediary table for User-Role many-to-many relationship
model UserRole {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    roleId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id])
    role   Role   @relation(fields: [roleId], references: [id])

    @@unique([userId, roleId])
}

// Intermediary table for Role-Permission many-to-many relationship
model RolePermission {
    id           String     @id @default(auto()) @map("_id") @db.ObjectId
    roleId       String     @db.ObjectId
    permissionId String     @db.ObjectId
    role         Role       @relation(fields: [roleId], references: [id])
    permission   Permission @relation(fields: [permissionId], references: [id])

    @@unique([roleId, permissionId])
}
